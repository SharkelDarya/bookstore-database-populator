CREATE TABLE order_status (
    status_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status_value VARCHAR2(255) NOT NULL
);

CREATE TABLE shipping_method (
    method_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    method_name VARCHAR2(255) NOT NULL,
    cost        INTEGER NOT NULL
);

CREATE TABLE accounts (
    account_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login      VARCHAR2(255) NOT NULL,
    password   VARCHAR2(255) NOT NULL
);

CREATE TABLE country (
    country_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country_name VARCHAR2(255) NOT NULL
);

CREATE TABLE address (
    address_id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    city               VARCHAR2(255) NOT NULL,
    street_name        VARCHAR2(255) NOT NULL,
    street_number       VARCHAR2(255) NOT NULL,
    country_country_id         INTEGER NOT NULL,
    FOREIGN KEY (country_country_id) REFERENCES country (country_id)
);

CREATE TABLE author (
    author_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author_name VARCHAR2(255) NOT NULL
);

CREATE TABLE book (
    book_id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title            VARCHAR2(255) NOT NULL,
    isbn13           VARCHAR2(13),
    num_pages        INTEGER NOT NULL,
    publication_date DATE NOT NULL,
    cover            VARCHAR2(255),
    description      VARCHAR2(1020) NOT NULL,
    amount           INTEGER NOT NULL,
    price            NUMBER(6, 2) NOT NULL
);

CREATE TABLE review (
    review_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_value VARCHAR2(255) NOT NULL,
    book_book_id INTEGER NOT NULL,
    apprasial    INTEGER NOT NULL,
    FOREIGN KEY (book_book_id) REFERENCES book (book_id)
);

CREATE TABLE book_authors (
    book_book_id           INTEGER NOT NULL,
    author_author_id         INTEGER NOT NULL,
    PRIMARY KEY (book_book_id, author_author_id),
    FOREIGN KEY (book_book_id) REFERENCES book (book_id),
    FOREIGN KEY (author_author_id) REFERENCES author (author_id)
);

CREATE TABLE customer (
    customer_id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name          VARCHAR2(255) NOT NULL,
    last_name           VARCHAR2(255) NOT NULL,
    email               VARCHAR2(255) NOT NULL,
    accounts_account_id              INTEGER,
    FOREIGN KEY (accounts_account_id) REFERENCES accounts (account_id)
);

CREATE TABLE cust_order (
    order_id                  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_date                DATE NOT NULL,
    customer_customer_id             INTEGER NOT NULL,
    shipping_method_method_id               INTEGER NOT NULL,
    address_address_id              INTEGER NOT NULL,
    FOREIGN KEY (customer_customer_id) REFERENCES customer (customer_id),
    FOREIGN KEY (shipping_method_method_id) REFERENCES shipping_method (method_id),
    FOREIGN KEY (address_address_id) REFERENCES address (address_id)
);

CREATE TABLE cart (
    cart_id              INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quantity             INTEGER NOT NULL,
    customer_customer_id          INTEGER NOT NULL,
    book_book_id              INTEGER NOT NULL,
    cust_order_order_id             INTEGER,
    FOREIGN KEY (customer_customer_id) REFERENCES customer (customer_id),
    FOREIGN KEY (book_book_id) REFERENCES book (book_id),
    FOREIGN KEY (cust_order_order_id) REFERENCES cust_order (order_id)
);

CREATE TABLE cust_address (
    customer_customer_id INTEGER NOT NULL,
    address_address_id   INTEGER NOT NULL,
    FOREIGN KEY (customer_customer_id) REFERENCES customer (customer_id),
    FOREIGN KEY (address_address_id) REFERENCES address (address_id)
);

CREATE TABLE order_history (
    history_id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status_date            DATE NOT NULL,
    cust_order_order_id    INTEGER NOT NULL,
    order_status_status_id INTEGER NOT NULL,
    FOREIGN KEY (order_status_status_id) REFERENCES order_status (status_id),
    FOREIGN KEY (cust_order_order_id) REFERENCES cust_order (order_id)
);

DROP TABLE cart;
DROP TABLE cust_address;
DROP TABLE order_history;
DROP TABLE review;
DROP TABLE order_status;
DROP TABLE book_authors;
DROP TABLE book;
DROP TABLE author;
DROP TABLE cust_order;
DROP TABLE shipping_method;
DROP TABLE address;
DROP TABLE country;
DROP TABLE customer;
DROP TABLE accounts;